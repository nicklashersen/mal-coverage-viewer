/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mal.coverage.viewer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONObject;
import org.json.JSONTokener;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

import javafx.scene.layout.BorderPane;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;

import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import mal.coverage.viewer.model.MalAsset;
import mal.coverage.viewer.model.MalModel;
import mal.coverage.viewer.view.DataCell;
import mal.coverage.viewer.view.Edge;
import mal.coverage.viewer.view.Graph;

// import javafx.scene.shape.Rectangle;
// import javafx.scene.paint.Color;

public class Main extends Application {
	private Stage stage;
	private Graph graph;

	@Override
	public void start(Stage primaryStage) {
		BorderPane root = new BorderPane();
		MenuBar menuBar = createMenu();
		graph = new Graph();

		root.setCenter(graph.getScrollPane());
		root.setTop(menuBar);

		Scene scene = new Scene(root, 1024, 769);
		scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());

		primaryStage.setScene(scene);
		primaryStage.show();

		stage = primaryStage;

		// Rectangle rect = new Rectangle(80, 30);

		// graph.cellLayer.getChildren().add(rect);

	}

	/**
	 * Create the window menu bar
	 * 
	 * @return a javafx window menu object
	 */
	private MenuBar createMenu() {
		MenuBar menuBar = new MenuBar();

		Menu fileMenu = new Menu("File");
		MenuItem fitem1 = new MenuItem("Open");

		fitem1.setOnAction(e -> {
			FileChooser fChooser = new FileChooser();
			fChooser.setTitle("Open graph file");
			fChooser.getExtensionFilters().addAll(new ExtensionFilter("JSON Files", "*.json"),
					new ExtensionFilter("All Files", "*.*"));

			File selectedFile = fChooser.showOpenDialog(stage);

			if (selectedFile != null)
				loadFile(selectedFile);
		});

		fileMenu.getItems().add(fitem1);
		menuBar.getMenus().add(fileMenu);

		return menuBar;
	}

	/**
	 * Construct MalModels from a JSON file containing MAl simulations.
	 * 
	 * @param file JSON file
	 */
	private void loadFile(File file) {
		JSONObject root = null;

		try {
			root = new JSONObject(new JSONTokener(new BufferedReader(new FileReader(file))));
		} catch (Exception e) {
		}

		if (root != null) {
			graph.clear();
			MalModel model = MalModel.fromJSON(root);
			Map<Long, DataCell>  cells = new HashMap<Long, DataCell>(model.assets.size());

			// Add nodes
			for (MalAsset asset : model.assets) {
				DataCell cell = new DataCell(asset);

				cells.put(asset.id, cell);
				graph.addCell(cell);
			}

			// Add edges
			for (MalAsset asset : model.assets) {
				for (long nodeId : asset.connections) {
					if (asset.id > nodeId) {	
						graph.cellLayer.getChildren().add(new Edge(cells.get(asset.id), cells.get(nodeId)));
					}
				}
			}
		}
	}

	public static void main(String[] args) {
		launch(args);
	}
}
